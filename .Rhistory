ppois(10, lamdba = 5*3)
ppois(10, lambda = 5*3)
pnorm(70,80,10)
?pnorm
qnorm(70,80,10)
qnorm(0.1586553,80,10)
qnorm(0.95,1100,75)
qnorm(0.95,1,0)
qnorm(0.95,0,1)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(5, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
?pbinom
pbinom(0:5, size = 5, prob = 0.5, lower.tail = FALSE)
choose(5,4)*0.5^5+ choose(5,5)*0.5^5
dbinom(0:5, size = 5, prob = 0.5, lower.tail = FALSE)
dbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
dbinom(4, size = 5, prob = 0.5)
dbinom(4:5, size = 5, prob = 0.5)
x <- dbinom(4:5, size = 5, prob = 0.5)
sum(x)
pnorm(1,1,0)
pnorm(1,0,1)
pnorm(-11,0,1)
pnorm(-1,0,1)
ppois(10, lambda = 5*3)
setwd("F:/Munka/Coursera/Data/RepData_PeerAssessment1")
activity <- read.csv("activity.csv", colClasses=c("numeric","character","numeric"),header=TRUE)
str(activity)
activity <- read.csv("activity.csv", colClasses=c("numeric","date","numeric"),header=TRUE)
activity <- read.csv("activity.csv", colClasses=c("numeric","Date","numeric"),header=TRUE)
str(activity)
library(plyr)
total_steps <- ddply(df[1:2],"date",numcolwise(sum))
total_steps <- ddply(activity[1:2],"date",numcolwise(sum))
total_steps
total_steps <- !is.na(ddply(activity[1:2],"date",numcolwise(sum)))
total_steps <- na.omit((ddply(activity[1:2],"date",numcolwise(sum))))
total_steps
ggplot(total_steps$steps) + geom_histogram()
library(ggplot2)
ggplot(total_steps$steps) + geom_histogram()
library(lattice)
histogram(total_steps$steps)
histogram(total_steps$steps, binwidth = 20)
histogram(total_steps$steps, binwidth = 10)
hist(total_steps$steps)
hist(total_steps$steps, col = green)
hist(total_steps$steps, col = "green")
hist(total_steps$steps, col = "green", xlab = "Total Steps")
hist(total_steps$steps, col = "green", xlab = "Total Steps", main = Total Steps Taken Each Day)
hist(total_steps$steps, col = "green", xlab = "Total Steps", main = "Total Steps Taken Each Day")
hist(total_steps$steps, col = "green", xlab = "Total Steps", main = "Total Steps Taken Each Day", binwidth = 10)
?histogram
?qplot
qplot(steps, data = total_steps, geom = "histogram" )
qplot(steps, data = total_steps, geom = "histogram", col = "green")
qplot(steps, data = total_steps, geom = "histogram")
qplot(steps, data = total_steps, geom = "histogram", binwidth = 500)
qplot(steps, data = total_steps, geom = "histogram", binwidth = 100)
qplot(steps, data = total_steps, geom = "histogram", binwidth = 1000)
qplot(steps, data = total_steps, geom = "histogram", binwidth = 10000)
qplot(steps, data = total_steps, geom = "histogram", binwidth = 4000)
qplot(steps, data = total_steps, geom = "histogram", binwidth = 2000)
View(total_steps)
View(total_steps)
ggplot(total_steps, aes(x = "steps")) + geom_histogram()
ggplot(total_steps, aes(steps) + geom_histogram()
)
ggplot(total_steps, aes(steps)) + geom_histogram()
?ggplot
ggplot(total_steps, aes(steps)) + geom_histogram() + stat_bin()
ggplot(total_steps, aes(steps)) + geom_histogram(breaks = 1000)
ggplot(total_steps, aes(steps)) + geom_histogram(colour = "red")
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "red")
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue")
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black")
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", size = 10)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", size = 100)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", size = 1)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", size = 0.4)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", size = 0.01)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", size = 5)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black")
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black") + stat_bin(binwidth = 1000)
ggplot(total_steps, aes(steps), binwidth = 1000) + geom_histogram(fill = "blue", colour = "black")
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_log10()
total_steps
str(total_steps)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + stat_bin(breaks = 1000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 4000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000, breaks = 1000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000, breaks = 5000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000, breaks = 500)
ggplot(total_steps, aes(steps)) + stat_bin(binwidth = 1000, breaks = 1000)
ggplot(total_steps, aes(steps)) + stat_bin(binwidth = 1000)
ggplot(total_steps, aes(steps)) + stat_bin(binwidth = 1000, drop = FALSE, right = TRUE)
ggplot(total_steps, aes(steps)) + stat_bin(binwidth = 1000, drop = FALSE, right = TRUE, breaks = 1000)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = c(0:25000,1000))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = c(0,1000,2000,3000,10000))
c(0:25000,1000)
seq(0:25000,1000)
seq(1:25000,1000)
?seq
seq(0, 25000, by = 1000)
max(total_steps$steps)
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = seq(0,22000,by = 1000))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = seq(0,22000,by = 1000)) + scale_y_discrete(breaks = c(0:10))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = seq(0,22000,by = 1000)) + scale_y_discrete(breaks = c(0:9))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = seq(0,22000,by = 1000)) + scale_y_discrete(breaks = c(0:11))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = seq(0,22000,by = 1000)) + scale_y_discrete(breaks = c(0:15))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = seq(0,22000,by = 1000)) + scale_y_discrete(breaks = c(0:10))
ggplot(total_steps, aes(steps = Steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(breaks = seq(0,22000,by = 1000)) + scale_y_discrete(breaks = c(0:10))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) + scale_y_discrete(breaks = c(0:10))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) + scale_y_discrete(name = "Counts", breaks = c(0:10))
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) + scale_y_discrete(name = "Counts", breaks = c(0:10)) + ggtitle("Total Steps Taken Each Day")
ggplot(total_steps, aes(steps)) + geom_histogram(fill = "blue", colour = "black", binwidth = 1000) + scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) + scale_y_discrete(name = "Counts", breaks = c(0:10)) + labs(title ="Total Steps Taken Each Day")
```{r}
ggplot(total_steps, aes(steps))
+ geom_histogram(fill = "blue", colour = "black", binwidth = 1000)
+ scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000))
+ scale_y_discrete(name = "Counts", breaks = c(0:10))
+ labs(title ="Total Steps Taken Each Day")
```{r}
ggplot(total_steps, aes(steps)) +
geom_histogram(fill = "blue", colour = "black", binwidth = 1000) +
scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) +
scale_y_discrete(name = "Counts", breaks = c(0:10)) +
labs(title ="Total Steps Taken Each Day")
steps_mean <- mean(total_steps$steps)
summary(total_steps$steps)
summary(total_steps$steps)[3]
summary(total_steps$steps)[4]
print("The mean total number of steps taken per day", summary(total_steps[4]))
print(paste("The mean total number of steps taken per day", summary(total_steps[4])))
print("The mean total number of steps taken per day", summary(total_steps)[4])
print(paste("The mean total number of steps taken per day", summary(total_steps)[4]))
print(paste("The mean total number of steps taken per day", summary(total_steps$steps)[4]))
print(paste("The mean total number of steps taken per day is", summary(total_steps$steps)[4]))
print(paste("The median total number of steps taken per day is", summary(total_steps$steps)[3]))
View(total_steps)
summary(total_steps$steps)
median <- median(total_steps$steps)
mean <- mean(total_steps$steps)
print(paste("The mean total number of steps taken per day is", mean)
print(paste("The median total number of steps taken per day is", median)
activity <- read.csv("activity.csv", colClasses=c("numeric","Date","numeric"),header=TRUE)
library(plyr)
total_steps <- na.omit((ddply(activity[1:2],"date",numcolwise(sum))))
library(ggplot2)
ggplot(total_steps, aes(steps)) +
geom_histogram(fill = "blue", colour = "black", binwidth = 1000) +
scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) +
scale_y_discrete(name = "Counts", breaks = c(0:10)) +
labs(title ="Total Steps Taken Each Day")
median <- median(total_steps$steps)
mean <- mean(total_steps$steps)
print(paste("The mean total number of steps taken per day is", mean))
print(paste("The median total number of steps taken per day is", median))
print(paste("The mean total number of steps taken per day is", round(mean))
)
print(paste("The mean total number of steps taken per day is", round(mean)))
print(paste("The median total number of steps taken per day is", median))
print(paste("The mean total number of steps taken per day is", round(mean), digits = 2))
print(paste("The mean total number of steps taken per day is", round(mean, digits = 2)))
head(activity)
head(activity, 50)
avg_interval <- ddply(activity[c(1,3)],"interval",numcolwise(avg))
?avg
?average
avg_interval <- ddply(activity[c(1,3)],"interval",numcolwise(mean))
?ddply
activity[c(1,3)]
head(activity[c(1,3)])
avg_interval <- ddply(activity[c(1,3)],"interval",numcolwise(mean), na.rm = T)
avg_interval <- ddply(activity[c(1,3)],"interval",mean, na.rm = T)
avg_interval <- ddply(activity[c(1,3)],"interval",numcolwise(mean), na.rm = T)
?numcolwise
avg_interval <- ddply(activity[c(1,3)],"interval",mean, na.rm = T)
avg_interval <- ddply(activity[c(1,3)],.(interval), mean, steps = mean(steps) )
avg_interval <- ddply(activity[c(1,3)],.(interval), mean, steps = mean(steps))
df <- activity[c(1,3)]
head(df)
head(total_steps)
ddply(df,"interval",numcolwise(mean))
ddply(df,"interval",colwise(mean))
?tapply
tapply(df, interval, mean)
tapply(df, "interval", mean)
?by
by(df, interval,mean)
by(df, "interval",mean)
activity <- read.csv("activity.csv", colClasses=c("numeric","Date","factor"),header=TRUE)
by(df, "interval",mean)
str(activity)
df <- activity[c(1,3)]
by(df, "interval",mean)
str(dfű)
str(df)
by(df, interval,mean)
by(df, df$interval,mean)
by(df, df$interval, mean)
?mean
?by
require(stats)
by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
head(warpbreaks)
x <- aggregate(activity$steps ~ activit$interval, FUN = mean)
x <- aggregate(activity$steps ~ activitx$interval, FUN = mean)
x <- aggregate(activity$steps ~ activity$interval, FUN = mean)
?aggregate
x <- aggregate(activity$steps ~ activity$interval, mean)
x <- aggregate(activity$steps, activity$interval, mean)
str(activity)
activity$interval <- as.numeris(acitvity$interval)
activity$interval <- as.numeric(acitvity$interval)
activity$interval <- as.numeric(activity$interval)
str(activity)
x <- aggregate(activity$steps, activity$interval, mean)
activity$interval <- as.list(activity$interval)
x <- aggregate(activity$steps, activity$interval, mean)
activity$interval <- as.numeric(activity$interval)
str(activity)
head(activity)
activity <- read.csv("activity.csv", colClasses=c("numeric","Date","numeric"),header=TRUE)
x <- ddply(activity, .(interval), summarize, mean = mean(steps))
x
x <- ddply(activity, .(interval), summarize, mean = mean(steps), rm.na = TRUE)
x
x <- ddply(activity, .(interval), summarize, mean = mean(steps), na.rm = TRUE)
x
x <- ddply(activity, .(interval), summarize, mean = mean(steps, na.rm =TRUE))
x
interval_mean <- ddply(activity, .(interval), summarize, mean = mean(steps, na.rm =TRUE))
with(interval_mean, plot(mean, interval, type = "l"))
with(interval_mean, plot(interval, mean, type = "l"))
?plot
axis(1, 1:288)
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line()
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(names = Interval, breaks = c(1:288))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(names = "Interval", breaks = c(1:288))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = c(1:288))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = 1:288)
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval")
?scale-x discrete
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = 1)
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = seq(1:2355,5))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = seq(1,2355,5))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = seq(1,2355,50))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = seq(1,2355,500))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = seq(1,2355,5))
ggplot(interval_mean, aes(x = interval, y = mean)) + geom_line() + scale_x_discrete(name = "Interval", breaks = seq(1,2355,50))
max <- subset(activity, steps = max)
max
max <- subset(activity, steps == max(steps))
max
with(activity, max(steps))
max <- subset(activity, steps == max(steps, na.rm = T))
max
interval_mean
head(interval_mean)
max_interval <- subset(interval_mean, mean == MAX(mean))$interval
max_interval <- subset(interval_mean, mean == max(mean))$interval
max_interval
max <- subset(activity, steps == max(steps, na.rm = T))
max
max(interval_mean$mean)
subset(interval_mean, interval$mean == max(interval_mean$mean)
)
subset(interval_mean, interval_mean$mean == max(interval_mean$mean)
)
View(interval_mean)
View(interval_mean)
interval_mean <- ddply(activity, .(interval), summarize, mean = mean(steps, na.rm =TRUE))
ggplot(interval_mean, aes(x = interval, y = mean)) +
geom_line() +
scale_x_discrete(name = "Interval", breaks = seq(1,2355,500))
max_interval <- subset(interval_mean, mean == max(mean))$interval
max_interval
max_interval <- subset(interval_mean, mean == max(mean))$interval
print(paste("The ", max_interval, "th 5-minute interval contains the maximum number of steps."))
print(paste("The ", max_interval, "th 5-minute interval contains the maximum number of steps.", sep = ""))
print(paste("The ", max_interval, "5-minute interval contains the maximum number of steps."))
print(paste("The", max_interval, "5-minute interval contains the maximum number of steps."))
sum(!is.na(activity$steps))
sum(is.na(activity$steps))
print(paste("There are",sum(is.na(activity$steps)),"missin values."
print(paste("There are",sum(is.na(activity$steps)),"missin values.")
```
e
print(paste("There are",sum(is.na(activity$steps)),"missin values."))
missing_values <- sum(is.na(activity$steps))
print(paste("There are",missing_values,"missing values."))
?sub
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
x
impute.mean
length(activity)
dim(activity)
dim(activity)[1]
activity[1,1]
activity[2,1]
activity[1424,1]
activity[8573,1]
head(activity)
head(interval_mean)
activit_filled <- activity
for (i in 1: dim(activity_filled)[1]) {
if activity_filled[i,1] == NA {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[,3])[2]
}
}
rm(activit_filled)
activity_filled <- activity
for (i in 1: dim(activity_filled)[1]) {
if activity_filled[i,1] == NA {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[,3])[2]
}
}
```
activity_filled <- activity
for (i in 1: dim(activity_filled)[1]) {
if (activity_filled[i,1] == NA) {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[,3])[2]
}
}
for (i in 1: dim(activity_filled)[1]) {
if (activity_filled[i,1] == 'NA') {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[,3])[2]
}
}
activity_filled <- activity
for (i in 1: dim(activity_filled)[1]) {
if (is.na(activity_filled[i,1]) == TRUE {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[,3])[2]
}
}
activity_filled <- activity
for (i in 1: dim(activity_filled)[1]) {
if (is.na(activity_filled[i,1])) == TRUE {
for (i in 1: dim(activity_filled)[1]) {
if (is.na(activity_filled[i,1]) == TRUE) {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[,3])[2]
}
}
warnings()
head(activity_filled)
head(interval_mean)
subset(interval_mean, interval == activity_filled[,3])[2]
head(subset(interval_mean, interval == activity_filled[,3])[2])
head(subset(interval_mean, interval == activity_filled[1,3])[2])
activity_na <- subset(activity, steps == NA)
View(activity_na)
View(activity_na)
activity_na <- subset(activity, activity$steps == NA)
activity_na <- subset(activity, interval == 5)
activity_na <- subset(activity, is.na(steps) == T)
head(activity)
grep(NA, activity$steps)
head(activityű)
head(activity,50)
activity <- read.csv("activity.csv", colClasses=c("numeric","Date","numeric"),header=TRUE)
head(activity,50)
head(activity,230)
activity <- read.csv("activity.csv", colClasses=c("numeric","Date","numeric"),header=TRUE)
View(activity)
View(activity)
?grep
?grepl
grepl(NA, activity$steps)
table(grepl(NA, activity$steps))
table(grepl("NA", activity$steps))
activity_filled <- activity
for (i in 1: dim(activity_filled)[1]) {
if (is.na(activity_filled[i,1]) == TRUE) {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[i,3])[2]
}
}
```
head(activity_filled)
head(interval_length)
head(interval_mean)
sum(is.na(activity_filled))
activity_filled <- activity
for (i in 1: dim(activity_filled)[1]) {
if (is.na(activity_filled[i,1]) == TRUE) {
activity_filled[i,1] <- subset(interval_mean, interval == activity_filled[i,3])[2]
}
}
```
View(activity_filled)
View(activity_filled)
View(interval_mean)
View(interval_mean)
View(activity_filled)
View(activity_filled)
library(plyr)
total_steps_filled <- (ddply(activity[1:2],"date",numcolwise(sum)))
library(ggplot2)
ggplot(total_steps_filled, aes(steps)) +
geom_histogram(fill = "blue", colour = "black", binwidth = 1000) +
scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) +
scale_y_discrete(name = "Counts", breaks = c(0:10)) +
labs(title ="Total Steps Taken Each Day")
library(plyr)
total_steps_filled <- (ddply(activity[1:2],"date",numcolwise(sum)))
library(ggplot2)
geom_histogram(fill = "blue", colour = "black", binwidth = 1000) +
ggplot(total_steps_filled, aes(steps)) +
scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) +
scale_y_discrete(name = "Counts", breaks = c(0:10)) +
labs(title ="Total Steps Taken Each Day")
median_filled <- median(total_steps$steps)
mean_filled <- mean(total_steps$steps)
print(paste("The mean total number of steps taken per day is", round(mean, digits = 2)))
print(paste("The median total number of steps taken per day is", median))
print(paste("The mean total number of steps taken per day is", round(mean_filled, digits = 2)))
print(paste("The median total number of steps taken per day is", median_filled))
windows()
ggplot(total_steps, aes(steps)) +
geom_histogram(fill = "blue", colour = "black", binwidth = 1000) +
scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) +
scale_y_discrete(name = "Counts", breaks = c(0:10)) +
```
labs(title ="Total Steps Taken Each Day")
library(ggplot2)
ggplot(total_steps, aes(steps)) +
geom_histogram(fill = "blue", colour = "black", binwidth = 1000) +
scale_x_discrete(name = "Total Steps", breaks = seq(0,22000,by = 1000)) +
scale_y_discrete(name = "Counts", breaks = c(0:10)) +
labs(title ="Total Steps Taken Each Day")
?weekdays
m <- weekdays(activity$date)
m
?factor
factor <- factor(c("weekend","weekdays"))
factor
?weekday
?weekdays()
weekddays(Sys.Date())
weekdays(Sys.Date())
as.numeric(weekdays(Sys.Date()))
date <- activity$date
class(dte)
class(date)
head(date2)
head(date)
date_2 <- transform(date, weekend = as.POSIXlt(date, format = "%Y-%m-%d")$wday %in% c(0,6))
date_2 <- transform(activity, weekend = as.POSIXlt(date, format = "%Y-%m-%d")$wday %in% c(0,6))
head(date_2)
View(date_2)
View(date_2)
date_2$IsWeekend <- date_2$date %in% weekend
date_2$IsWeekend <- date_2$date %in% weekend()
?transform
date_2$weekend <- c(1:17568)
View(date_2)
View(date_2)
date_2$weekend2 <- 1
date_2$weekend2[1] <- 1
date_2$weekend4[1] <- 1
View(date_2)
View(date_2)
date_2$weekend4[1] <- 35
date_2$weekend4[6] <- 354
View(date_2)
View(date_2)
days[1]
days <- factor (c("Weekend","Weekday"))
days[1]
week <- factor (c("Weekend","Weekday"))
for (i in 1:dim(activity_filled)[1]) {
if (weekday(activity_filled[i,2]) %in% c("Saturday","Sunday") == T) {
activity_filled$weekend <- week[1]
}
activity_filled$weekend <- week[2]
}
week <- factor (c("Weekend","Weekday"))
for (i in 1:dim(activity_filled)[1]) {
if (weekdays(activity_filled[i,2]) %in% c("Saturday","Sunday") == T) {
activity_filled$weekend <- week[1]
activity_filled$weekend <- week[2]
}
}
View(activity_filled)
View(activity_filled)
activity_filled$weekend <- week[1]
View(activity_filled)
View(activity_filled)
str(activity_filled)
week <- factor (c("Weekend","Weekday"))
activity_filled$weekend <- week[2]
for (i in 1:dim(activity_filled)[1]) {
if (weekdays(activity_filled[i,2]) %in% c("Saturday","Sunday") == T) {
}
}
activity_filled$weekend <- week[1]
View(activity_filled)
View(activity_filled)
week
week(1)
week(1)
week[1]
activity_filled$weekend <- week[2]
View(activity_filled)
View(activity_filled)
weekdays(activit_filled[1,2])
weekdays(activity_filled[1,2])
